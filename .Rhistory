if (!require("devtools", quietly = TRUE))
install.packages("devtools")
if (!require("roxygen2", quietly = TRUE))
install.packages("roxygen2")
document()
library(roxygen2)
library(devtools)
document()
getwd()
create(GoFluxYourself)
create("GoFluxYourself")
vignette("rd")
document()
?import2Rdata
vignette("rd-formatting")
document()
?import2Rdata
document()
?import2Rdata
document()
?import2Rdata
R CMD check
@importFrom rjson fromJSON
write("dummy", file = "in_path/dummy.txt")
if(dir.exists("in_path") == FALSE){dir.create("in_path")}
write("dummy", file = "in_path/dummy.txt")
mv.dir("in_path", "out_path", pattern = ".txt", recursive = FALSE)
write("dummy", file = "in_path/dummy.txt")
mv.dir("in_path", "out_path", pattern = ".txt", recursive = TRUE)
message("hello")
supress_message(message("hello"))
unlink("out_path", recursive = TRUE)
file.path <- system.file("extdata", "LI8200/example_LI8200.json", package = "GoFluxYourself)
file.path <- system.file("extdata", "LI8200/example_LI8200.json", package = "GoFluxYourself")
file.path
devtools::install_github()
install.packages("pbapply")
install.packages("pkgdown")
library(pkgdown)
usethis::use_pkgdown()
pkgdown::build_site()
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)")
function_path <- paste(getwd(), "functions", sep = "/")
source(paste(function_path, "000 required packages.R", sep = "/"))
paste(function_path, list.files(path = function_path, pattern = "\\.R"), sep = "/") %>%
.[grepl("import|utility", .)] %>% quiet(sapply(., source, .GlobalEnv))
flux_path_GAIA <- paste(getwd(), "test files/GAIA", sep = "/")
flux_path_GAIA
import2Rdata(path = flux_path_GAIA,
instrument = "GAIA",
date.format = "ymd")
View(import2Rdata)
View(mv.dir)
pkgdown::build_site()
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself")
pkgdown::build_site()
library(GoFluxYourself)
library(pkgdown)
usethis::use_pkgdown()
pkgdown::build_site()
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)")
function_path <- paste(getwd(), "functions", sep = "/")
source(paste(function_path, "000 required packages.R", sep = "/"))
paste(function_path, list.files(path = function_path, pattern = "\\.R"), sep = "/") %>%
.[grepl("import|utility", .)] %>% quiet(sapply(., source, .GlobalEnv))
# paths containing files for each instrument
flux_path_LI6400 <- paste(getwd(), "test files/LI6400", sep = "/")
flux_path_LI7810 <- paste(getwd(), "test files/LI7810", sep = "/")
import2Rdata(path = flux_path_LI6400,
instrument = "LI-6400",
date.format = "mdy")
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)")
function_path <- paste(getwd(), "functions", sep = "/")
source(paste(function_path, "000 required packages.R", sep = "/"))
paste(function_path, list.files(path = function_path, pattern = "\\.R"), sep = "/") %>%
.[grepl("import|utility", .)] %>% quiet(sapply(., source, .GlobalEnv))
# paths containing files for each instrument
flux_path_LI6400 <- paste(getwd(), "test files/LI6400", sep = "/")
flux_path_LI7810 <- paste(getwd(), "test files/LI7810", sep = "/")
import2Rdata(path = flux_path_LI6400,
instrument = "LI-6400",
date.format = "mdy")
import2Rdata(path = paste(getwd(), "test files/GAIA", sep = "/"),
instrument = "GAIA",
date.format = "ymd")
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/Rdata/GAIA/daily_20230608_000000_1.Rdata")
View(data.raw)
inputfile = "test files/example_smart_chamber.json"
# Load data file
data.raw.ls <- fromJSON(file = inputfile)
View(data.raw.ls)
View(data.raw)
# Create empty lists to extract objects from lists of data.raw.ls
df.ls <- list()
plot.ID.ls <- list()
cham.close.ls <- list()
deadband.ls <- list()
Vcham.ls <- list()
offset.ls <- list()
# Loop through data.raw.ls
for (i in 1:length(data.raw.ls$datasets)) {
# loop through all measurements reps
all.reps <- data.raw.ls$datasets[[i]][[1]]$reps
# Extract plot.ID from list "datasets"
plot.ID.ls[[i]] <- names(data.raw.ls$datasets[[i]])
if(length(all.reps) > 0) {
rep.ls <- list()
for (j in 1:length(all.reps)) {
# Extract gas measurements from "data"
rep.ls[[j]] <- all.reps[[j]]$data
# Extract chamber closure time from "Date"
cham.close.ls[[i]] <- all.reps[[j]]$header$Date
# Extract deadband before measurement start from "DeadBand"
deadband.ls[[i]] <- all.reps[[j]]$header$DeadBand
# Extract chamber volume from "Vcham"
Vcham.ls[[i]] <- all.reps[[j]]$header$TotalVolume
# Extract chamber offset (collar height) from "Offset"
offset.ls[[i]] <- all.reps[[j]]$header$Offset
}
# Convert list of data into a dataframe
df.ls[[i]] <- map_df(rep.ls, ~as.data.frame(.x), .id="rep")
} else {
cham.close.ls[[i]] <- NA
deadband.ls[[i]] <- NA
Vcham.ls[[i]] <- NA
offset.ls[[i]] <- NA
}
}
# Convert lists of metadata into matrix
metadata <- cbind.data.frame(
Obs = as.character(c(1:length(data.raw.ls$datasets))),
plot.ID = unlist(plot.ID.ls),
cham.close = unlist(cham.close.ls),
deadband = unlist(deadband.ls),
Vcham = unlist(Vcham.ls),
Area = 324)
# Create extra columns for CO2, CH4 or N2O, if missing
cols <- c(co2 = NA_real_, ch4 = NA_real_, n2o = NA_real_)
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time (USE UTC TIME ZONE!)
mutate(POSIX.time = as.POSIXct(cham.close, tz = "UTC") + timestamp + deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep,  Etime = timestamp, cham.close, deadband,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
TA_cham = chamber_t, pressure_cham = chamber_p, Vcham, Area,
SWC_cham = soilp_m, TS_cham = soilp_t, DATE) %>%
# Add start.time and end.time (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = first(POSIX.time),
end.time = last(POSIX.time),
Etime = seq(0, length(end.time - start.time)-1, 1)) %>%
ungroup()
View(data.raw)
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself")
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)")
source("000 required packages.R") # Run it twice, to also load packages.
import2Rdata(path = "inst/extdata/LI6400", instrument = "LI-6400", date.format = "ymd")
