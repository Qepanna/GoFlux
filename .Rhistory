# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time (USE UTC TIME ZONE!)
mutate(POSIX.time = as.POSIXct(cham.close, tz = timezone) + timestamp + deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep,  Etime = timestamp, cham.close, deadband,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
TA_cham = chamber_t, pressure_cham = chamber_p, Vcham, Area,
SWC_cham = soilp_m, TS_cham = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = first(POSIX.time),
cham.open = last(POSIX.time),
Etime = seq(0, length(cham.open - start.time)-1, 1)) %>%
ungroup()
View(data.raw)
# Assign NULL to variables without binding
h2o <- cham.close <- deadband <- POSIX.time <- plot.ID <- n2o <- . <-
ch4 <- co2 <- H2O_ppm <- chamber_t <- chamber_p <- Vcham <- Area <-
soilp_m <- soilp_t <- DATE <- cham.open <- start.time <- NULL
# Load data file
data.raw.ls <- fromJSON(file = inputfile)
# Create empty lists to extract objects from lists of data.raw.ls
df.ls <- list()
plot.ID.ls <- list()
cham.close.ls <- list()
deadband.ls <- list()
Vcham.ls <- list()
offset.ls <- list()
# Loop through data.raw.ls
for (i in 1:length(data.raw.ls$datasets)) {
# loop through all measurements reps
all.reps <- data.raw.ls$datasets[[i]][[1]]$reps
# Extract plot.ID from list "datasets"
plot.ID.ls[[i]] <- names(data.raw.ls$datasets[[i]])
if(length(all.reps) > 0) {
rep.ls <- list()
for (j in 1:length(all.reps)) {
# Extract gas measurements from "data"
rep.ls[[j]] <- all.reps[[j]]$data
# Extract chamber closure time from "Date"
cham.close.ls[[i]] <- all.reps[[j]]$header$Date
# Extract deadband before measurement start from "DeadBand"
deadband.ls[[i]] <- all.reps[[j]]$header$DeadBand
# Extract chamber volume from "Vcham"
Vcham.ls[[i]] <- all.reps[[j]]$header$TotalVolume
# Extract chamber offset (collar height) from "Offset"
offset.ls[[i]] <- all.reps[[j]]$header$Offset
}
# Convert list of data into a dataframe
df.ls[[i]] <- map_df(rep.ls, ~as.data.frame(.x), .id="rep")
} else {
cham.close.ls[[i]] <- NA
deadband.ls[[i]] <- NA
Vcham.ls[[i]] <- NA
offset.ls[[i]] <- NA
}
}
# Convert lists of metadata into matrix
metadata <- cbind.data.frame(
Obs = as.character(c(1:length(data.raw.ls$datasets))),
plot.ID = unlist(plot.ID.ls),
cham.close = unlist(cham.close.ls),
deadband = unlist(deadband.ls),
Vcham = unlist(Vcham.ls),
Area = 324)
# Create extra columns for CO2, CH4 or N2O, if missing
cols <- c(co2 = NA_real_, ch4 = NA_real_, n2o = NA_real_)
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time (USE UTC TIME ZONE!)
mutate(POSIX.time = as.POSIXct(cham.close, tz = timezone) + timestamp + deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep,  Etime = timestamp, cham.close, deadband,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = first(POSIX.time),
cham.open = last(POSIX.time),
Etime = seq(0, length(cham.open - start.time)-1, 1)) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
# Create empty lists to extract objects from lists of data.raw.ls
df.ls <- list()
plot.ID.ls <- list()
cham.close.ls <- list()
deadband.ls <- list()
Vcham.ls <- list()
offset.ls <- list()
Area.ls <- list()
# Loop through data.raw.ls
for (i in 1:length(data.raw.ls$datasets)) {
# loop through all measurements reps
all.reps <- data.raw.ls$datasets[[i]][[1]]$reps
# Extract plot.ID from list "datasets"
plot.ID.ls[[i]] <- names(data.raw.ls$datasets[[i]])
if(length(all.reps) > 0) {
rep.ls <- list()
for (j in 1:length(all.reps)) {
# Extract gas measurements from "data"
rep.ls[[j]] <- all.reps[[j]]$data
# Extract chamber closure time from "Date"
cham.close.ls[[i]] <- all.reps[[j]]$header$Date
# Extract deadband before measurement start from "DeadBand"
deadband.ls[[i]] <- all.reps[[j]]$header$DeadBand
# Extract chamber volume from "Vcham"
Vcham.ls[[i]] <- all.reps[[j]]$header$TotalVolume
# Extract chamber offset (collar height) from "Offset"
offset.ls[[i]] <- all.reps[[j]]$header$Offset
# Extract chamber Area (collar inner Area) from "Area"
Area.ls[[i]] <- all.reps[[j]]$header$Area
}
# Convert list of data into a dataframe
df.ls[[i]] <- map_df(rep.ls, ~as.data.frame(.x), .id="rep")
} else {
cham.close.ls[[i]] <- NA
deadband.ls[[i]] <- NA
Vcham.ls[[i]] <- NA
offset.ls[[i]] <- NA
Area.ls[[i]] <- NA
}
}
# Convert lists of metadata into matrix
metadata <- cbind.data.frame(
Obs = as.character(c(1:length(data.raw.ls$datasets))),
plot.ID = unlist(plot.ID.ls),
cham.close = unlist(cham.close.ls),
deadband = unlist(deadband.ls),
Vcham = unlist(Vcham.ls),
offset = unlist(offset.ls),
Area = unlist(Area.ls))
# Create extra columns for CO2, CH4 or N2O, if missing
cols <- c(co2 = NA_real_, ch4 = NA_real_, n2o = NA_real_)
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time (USE UTC TIME ZONE!)
mutate(POSIX.time = as.POSIXct(cham.close, tz = timezone) + timestamp + deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep,  Etime = timestamp, cham.close, deadband,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = first(POSIX.time),
cham.open = last(POSIX.time),
Etime = seq(0, length(cham.open - start.time)-1, 1)) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time (USE UTC TIME ZONE!)
mutate(POSIX.time = as.POSIXct(cham.close, tz = timezone) + timestamp + deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep,  Etime = timestamp - deadband, cham.close, deadband,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = first(POSIX.time),
cham.open = last(POSIX.time),
Etime = seq(0, length(cham.open - start.time)-1, 1)) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time (USE UTC TIME ZONE!)
mutate(POSIX.time = as.POSIXct(cham.close, tz = timezone) + timestamp + deadband,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = first(POSIX.time),
cham.open = last(POSIX.time),
Etime = seq(0, length(cham.open - start.time)-1, 1)) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time (USE UTC TIME ZONE!)
mutate(POSIX.time = as.POSIXct(cham.close, tz = timezone) + timestamp + deadband,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10))
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time
mutate(POSIX.time = as.POSIXct(cham.close, tz = timezone) + timestamp + deadband,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = first(POSIX.time),
cham.open = last(POSIX.time),
Etime2 = seq(0, length(cham.open - start.time)-1, 1)) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
View(data.raw)
View(data.raw)
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time
mutate(POSIX.time = as.POSIXct(cham.close, tz = timezone) + timestamp,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = first(POSIX.time),
cham.open = last(POSIX.time),
Etime2 = seq(0, length(cham.open - start.time)-1, 1)) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
View(data.raw)
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time
mutate(POSIX.time = as.POSIXct(cham.close, tz = timezone) + timestamp,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = cham.close + deadband,
cham.open = last(POSIX.time),
Etime2 = seq(0, length(cham.open - start.time)-1, 1)) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time
mutate(cham.close = as.POSIXct(cham.close, tz = timezone),
POSIX.time = cham.close + timestamp,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = cham.close + deadband,
cham.open = last(POSIX.time),
Etime2 = seq(0, length(cham.open - start.time)-1, 1)) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time
mutate(cham.close = as.POSIXct(cham.close, tz = timezone),
POSIX.time = cham.close + timestamp,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = cham.close + deadband,
cham.open = last(POSIX.time),
obs.length = as.numeric(cham.open - start.time, units = "secs")) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
View(data.raw)
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time
mutate(cham.close = as.POSIXct(cham.close, tz = timezone),
POSIX.time = cham.close + timestamp,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = cham.close + deadband,
cham.open = last(POSIX.time),
obs.length = as.numeric(cham.open - start.time, units = "secs")-1) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time
mutate(cham.close = as.POSIXct(cham.close, tz = timezone),
POSIX.time = cham.close + timestamp,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = cham.close + deadband,
cham.open = last(POSIX.time),
obs.length = as.numeric(cham.open - start.time, units = "secs")+1) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
View(data.raw)
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time
mutate(cham.close = as.POSIXct(cham.close, tz = timezone),
POSIX.time = cham.close + timestamp,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = cham.close + deadband,
cham.open = last(POSIX.time),
obs.length = as.numeric(cham.open - cham.close, units = "secs")+1) %>%
ungroup() %>%
# Create chamID
mutate(chamID = paste(plot.ID, rep, sep = "_"))
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time
mutate(cham.close = as.POSIXct(cham.close, tz = timezone),
POSIX.time = cham.close + timestamp,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = cham.close + deadband,
cham.open = last(POSIX.time),
obs.length = as.numeric(cham.open - cham.close, units = "secs")+1) %>%
ungroup() %>%
# Create chamID and flag
mutate(chamID = paste(plot.ID, rep, sep = "_"),
flag = if_else(between(POSIX.time, cham.close, cham.open), 1, 0))
# Convert list of dataframe into a dataframe
data.raw <- map_df(df.ls, ~as.data.frame(.x), .id="Obs") %>%
# Add metadata and extra columns for additional gases
left_join(as.data.frame(metadata), by = "Obs")%>%
add_column(!!!cols[!names(cols) %in% names(.)]) %>%
# Convert H2O_mmol/mol into H2O_ppm
mutate(H2O_ppm = h2o*1000) %>%
# Create a column for POSIX time
mutate(cham.close = as.POSIXct(cham.close, tz = timezone),
POSIX.time = cham.close + timestamp,
Etime = timestamp - deadband,
DATE = substr(POSIX.time, 0, 10)) %>%
# Select and rename useful columns
select(POSIX.time, plot.ID, rep, cham.close, deadband, Etime,
N2Odry_ppb = n2o, CH4dry_ppb = ch4, CO2dry_ppm = co2, H2O_ppm,
Tcham = chamber_t, Pcham = chamber_p, Vcham, Area,
SWC = soilp_m, Tsoil = soilp_t, DATE) %>%
# Add start.time and cham.open (POSIX.time)
group_by(plot.ID, rep) %>%
mutate(start.time = cham.close + deadband,
cham.open = last(POSIX.time),
obs.length = as.numeric(cham.open - cham.close, units = "secs")+1) %>%
ungroup() %>%
# Create chamID and flag
mutate(chamID = paste(plot.ID, rep, sep = "_"),
flag = if_else(between(POSIX.time, start.time, cham.open), 1, 0))
file.path <- system.file("extdata", "LI7820/example_LI7820.data", package = "GoFluxYourself")
inputfile = file.path
date.format = "ymd"
timezone = "UTC"
# Assign NULL to variables without binding
H2O_ppm <- H2O <- N2O <- TIME <- DATE <- DATAH <- NULL
# Find how many rows need to be skipped
skip.rows <- as.numeric(which(read.delim(inputfile, nrows = 20) == "DATAH",
arr.ind = TRUE)[1])
# Import raw data file from LI7820 (.data)
data.raw <- read.delim(inputfile, skip = skip.rows) %>%
# Remove the row "DATAU"
filter(!DATAH == 'DATAU') %>%
# Keep only usefyl columns and standardize column names
select(DATE, TIME, N2Odry_ppb = N2O, H2O_ppm = H2O) %>%
# Convert column class automatically
type.convert(as.is = TRUE) %>%
# Remove NAs
filter(H2O_ppm != "NaN")
# Create a new column containing date and time (POSIX format)
if(date.format == "dmy"){
data.raw$POSIX.time <- as.POSIXct(
dmy_hms(paste(data.raw$DATE, data.raw$TIME), tz = timezone))
}
if(date.format == "mdy"){
data.raw$POSIX.time <- as.POSIXct(
mdy_hms(paste(data.raw$DATE, data.raw$TIME), tz = timezone))
}
if(date.format == "ymd"){
data.raw$POSIX.time <- as.POSIXct(
ymd_hms(paste(data.raw$DATE, data.raw$TIME), tz = timezone))
}
