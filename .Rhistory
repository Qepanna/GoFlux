# Add start.time to inputfile and filter POSIXct
data.filter <- inputfile  %>%
right_join(time_filter, relationship = "many-to-many", by = "POSIX.time") %>%
drop_na(matches(gastype))
View(data.filter)
shoulder = 60
# Convert milliseconds to seconds, for compatibility
inputfile <- inputfile %>%
mutate(POSIX.time = as.POSIXct(round(POSIX.time, "secs")))
# Get start.time and UniqueID
if (is.null(auxfile)){
aux.data <- inputfile %>% select(UniqueID = chamID, start.time) %>% distinct()
} else {
# Rename chamID to UniqueID if auxfile is a smart chamber
if (any(grepl("chamID", names(auxfile))) == TRUE){
auxfile <- auxfile %>% mutate(UniqueID = chamID)
}
aux.data <- auxfile %>% select(UniqueID, start.time) %>% distinct()
}
# Get obs.length
if (is.null(obs.length)){
# If there is no auxfile
if (is.null(auxfile)){
aux.data <- aux.data %>% left_join(
inputfile %>% select(c(UniqueID = chamID, obs.length)) %>% distinct(), by = "UniqueID")
} else {
aux.data <- aux.data %>% left_join(
auxfile %>% select(c(UniqueID, obs.length)) %>% distinct(), by = "UniqueID")
}
} else {
aux.data <- aux.data %>% mutate(obs.length = obs.length)
}
# Define windows of time ranges to keep
time_range <- aux.data %>% group_by(UniqueID, start.time) %>%
reframe(time_min = start.time - shoulder,
time_max = start.time + obs.length + shoulder)
time_filter.ls <- list()
for (i in 1:nrow(time_range)) {
time_filter.ls[[i]] <- cbind.data.frame(UniqueID = time_range$UniqueID[[i]],
start.time = time_range$start.time[[i]],
POSIX.time = seq(from = time_range$time_min[i],
to = time_range$time_max[i],
by = 'sec'))
}
time_filter <- map_df(time_filter.ls, ~as.data.frame(.x)) %>% distinct()
# Add start.time to inputfile and filter POSIXct
data.filter <- inputfile  %>%
right_join(time_filter, relationship = "many-to-many", by = "POSIX.time") %>%
drop_na(matches(gastype))
shoulder = 0
# Convert milliseconds to seconds, for compatibility
inputfile <- inputfile %>%
mutate(POSIX.time = as.POSIXct(round(POSIX.time, "secs")))
# Get start.time and UniqueID
if (is.null(auxfile)){
aux.data <- inputfile %>% select(UniqueID = chamID, start.time) %>% distinct()
} else {
# Rename chamID to UniqueID if auxfile is a smart chamber
if (any(grepl("chamID", names(auxfile))) == TRUE){
auxfile <- auxfile %>% mutate(UniqueID = chamID)
}
aux.data <- auxfile %>% select(UniqueID, start.time) %>% distinct()
}
# Get obs.length
if (is.null(obs.length)){
# If there is no auxfile
if (is.null(auxfile)){
aux.data <- aux.data %>% left_join(
inputfile %>% select(c(UniqueID = chamID, obs.length)) %>% distinct(), by = "UniqueID")
} else {
aux.data <- aux.data %>% left_join(
auxfile %>% select(c(UniqueID, obs.length)) %>% distinct(), by = "UniqueID")
}
} else {
aux.data <- aux.data %>% mutate(obs.length = obs.length)
}
# Define windows of time ranges to keep
time_range <- aux.data %>% group_by(UniqueID, start.time) %>%
reframe(time_min = start.time - shoulder,
time_max = start.time + obs.length + shoulder)
time_filter.ls <- list()
for (i in 1:nrow(time_range)) {
time_filter.ls[[i]] <- cbind.data.frame(UniqueID = time_range$UniqueID[[i]],
start.time = time_range$start.time[[i]],
POSIX.time = seq(from = time_range$time_min[i],
to = time_range$time_max[i],
by = 'sec'))
}
time_filter <- map_df(time_filter.ls, ~as.data.frame(.x)) %>% distinct()
# Add start.time to inputfile and filter POSIXct
data.filter <- inputfile  %>%
right_join(time_filter, relationship = "many-to-many", by = "POSIX.time") %>%
drop_na(matches(gastype))
# Split data.filter into a list of data frame unique per measurement
flux.unique <- data.filter %>% group_split(start.time) %>% as.list()
# TEST LI6400 without AUX FILE
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI6400_imp.Rdata")
inputfile <- data.raw; rm(data.raw)
auxfile = NULL
gastype = "CO2dry_ppm"
obs.length = NULL
shoulder = 0
# Convert milliseconds to seconds, for compatibility
inputfile <- inputfile %>%
mutate(POSIX.time = as.POSIXct(round(POSIX.time, "secs")))
# Get start.time and UniqueID
if (is.null(auxfile)){
aux.data <- inputfile %>% select(UniqueID = chamID, start.time) %>% distinct()
} else {
# Rename chamID to UniqueID if auxfile is a smart chamber
if (any(grepl("chamID", names(auxfile))) == TRUE){
auxfile <- auxfile %>% mutate(UniqueID = chamID)
}
aux.data <- auxfile %>% select(UniqueID, start.time) %>% distinct()
}
# Get obs.length
if (is.null(obs.length)){
# If there is no auxfile
if (is.null(auxfile)){
aux.data <- aux.data %>% left_join(
inputfile %>% select(c(UniqueID = chamID, obs.length)) %>% distinct(), by = "UniqueID")
} else {
aux.data <- aux.data %>% left_join(
auxfile %>% select(c(UniqueID, obs.length)) %>% distinct(), by = "UniqueID")
}
} else {
aux.data <- aux.data %>% mutate(obs.length = obs.length)
}
# Define windows of time ranges to keep
time_range <- aux.data %>% group_by(UniqueID, start.time) %>%
reframe(time_min = start.time - shoulder,
time_max = start.time + obs.length + shoulder)
time_filter.ls <- list()
for (i in 1:nrow(time_range)) {
time_filter.ls[[i]] <- cbind.data.frame(UniqueID = time_range$UniqueID[[i]],
start.time = time_range$start.time[[i]],
POSIX.time = seq(from = time_range$time_min[i],
to = time_range$time_max[i],
by = 'sec'))
}
time_filter <- map_df(time_filter.ls, ~as.data.frame(.x)) %>% distinct()
# Add start.time to inputfile and filter POSIXct
data.filter <- inputfile  %>%
right_join(time_filter, relationship = "many-to-many", by = "POSIX.time") %>%
drop_na(matches(gastype))
# Split data.filter into a list of data frame unique per measurement
flux.unique <- data.filter %>% group_split(start.time) %>% as.list()
# TEST LI6400 without AUX FILE
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI6400_imp.Rdata")
inputfile <- data.raw; rm(data.raw)
auxfile = NULL
gastype = "CO2dry_ppm"
obs.length = NULL
shoulder = 0
# Convert milliseconds to seconds, for compatibility
inputfile <- inputfile %>%
mutate(POSIX.time = as.POSIXct(round(POSIX.time, "secs")))
# Get start.time and UniqueID
if (is.null(auxfile)){
aux.data <- inputfile %>% select(UniqueID = chamID, start.time) %>% distinct()
} else {
# Rename chamID to UniqueID if auxfile is a smart chamber
if (any(grepl("chamID", names(auxfile))) == TRUE){
auxfile <- auxfile %>% mutate(UniqueID = chamID)
}
aux.data <- auxfile %>% select(UniqueID, start.time) %>% distinct()
}
# Get obs.length
if (is.null(obs.length)){
# If there is no auxfile
if (is.null(auxfile)){
aux.data <- aux.data %>% left_join(
inputfile %>% select(c(UniqueID = chamID, obs.length)) %>% distinct(), by = "UniqueID")
} else {
aux.data <- aux.data %>% left_join(
auxfile %>% select(c(UniqueID, obs.length)) %>% distinct(), by = "UniqueID")
}
} else {
aux.data <- aux.data %>% mutate(obs.length = obs.length)
}
# Define windows of time ranges to keep
time_range <- aux.data %>% group_by(UniqueID, start.time) %>%
reframe(time_min = start.time - shoulder,
time_max = start.time + obs.length + shoulder)
time_filter.ls <- list()
for (i in 1:nrow(time_range)) {
time_filter.ls[[i]] <- cbind.data.frame(UniqueID = time_range$UniqueID[[i]],
start.time = time_range$start.time[[i]],
POSIX.time = seq(from = time_range$time_min[i],
to = time_range$time_max[i],
by = 'sec'))
}
time_filter <- map_df(time_filter.ls, ~as.data.frame(.x)) %>% distinct()
# Add start.time to inputfile and filter POSIXct
data.filter <- inputfile  %>%
right_join(time_filter, relationship = "many-to-many", by = "POSIX.time") %>%
drop_na(matches(gastype))
# Add start.time to inputfile and filter POSIXct
data.filter <- inputfile %>% select(!c(start.time)) %>%
right_join(time_filter, relationship = "many-to-many", by = "POSIX.time") %>%
drop_na(matches(gastype))
# Split data.filter into a list of data frame unique per measurement
flux.unique <- data.filter %>% group_split(start.time) %>% as.list()
if (length(flux.unique) > 20){
message("WARNING! Do not loop through more than 20 measurements at a time to avoid mistakes.",
"\nYou have ", length(flux.unique), " measurements in your dataset.",
"\nYou should split the next step into at least ", round(length(flux.unique)/20), " loops.")
}
# TEST LGR + AUX FILE
auxfile <- read.delim("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/inst/extdata/LGR/example_LGR_aux.txt") %>% mutate(start.time = as.POSIXct(start.time, tz = "UTC"))
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LGR_imp.Rdata")
inputfile <- data.raw; rm(data.raw)
gastype = "CO2dry_ppm"
obs.length = 180
shoulder = 120
# Convert milliseconds to seconds, for compatibility
inputfile <- inputfile %>%
mutate(POSIX.time = as.POSIXct(round(POSIX.time, "secs")))
# Get start.time and UniqueID
if (is.null(auxfile)){
aux.data <- inputfile %>% select(UniqueID = chamID, start.time) %>% distinct()
} else {
# Rename chamID to UniqueID if auxfile is a smart chamber
if (any(grepl("chamID", names(auxfile))) == TRUE){
auxfile <- auxfile %>% mutate(UniqueID = chamID)
}
aux.data <- auxfile %>% select(UniqueID, start.time) %>% distinct()
}
# Get obs.length
if (is.null(obs.length)){
# If there is no auxfile
if (is.null(auxfile)){
aux.data <- aux.data %>% left_join(
inputfile %>% select(c(UniqueID = chamID, obs.length)) %>% distinct(), by = "UniqueID")
} else {
aux.data <- aux.data %>% left_join(
auxfile %>% select(c(UniqueID, obs.length)) %>% distinct(), by = "UniqueID")
}
} else {
aux.data <- aux.data %>% mutate(obs.length = obs.length)
}
# Define windows of time ranges to keep
time_range <- aux.data %>% group_by(UniqueID, start.time) %>%
reframe(time_min = start.time - shoulder,
time_max = start.time + obs.length + shoulder)
time_filter.ls <- list()
for (i in 1:nrow(time_range)) {
time_filter.ls[[i]] <- cbind.data.frame(UniqueID = time_range$UniqueID[[i]],
start.time = time_range$start.time[[i]],
POSIX.time = seq(from = time_range$time_min[i],
to = time_range$time_max[i],
by = 'sec'))
}
time_filter <- map_df(time_filter.ls, ~as.data.frame(.x)) %>% distinct()
# Add start.time to inputfile and filter POSIXct
data.filter <- inputfile %>% select(!c(start.time)) %>%
right_join(time_filter, relationship = "many-to-many", by = "POSIX.time") %>%
drop_na(matches(gastype))
# TEST LGR + AUX FILE
auxfile <- read.delim("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/inst/extdata/LGR/example_LGR_aux.txt") %>% mutate(start.time = as.POSIXct(start.time, tz = "UTC"))
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LGR_imp.Rdata")
inputfile <- data.raw; rm(data.raw)
gastype = "CO2dry_ppm"
obs.length = 180
shoulder = 120
# Convert milliseconds to seconds, for compatibility
inputfile <- inputfile %>%
mutate(POSIX.time = as.POSIXct(round(POSIX.time, "secs")))
# Get start.time and UniqueID
if (is.null(auxfile)){
aux.data <- inputfile %>% select(UniqueID = chamID, start.time) %>% distinct()
} else {
# Rename chamID to UniqueID if auxfile is a smart chamber
if (any(grepl("chamID", names(auxfile))) == TRUE){
auxfile <- auxfile %>% mutate(UniqueID = chamID)
}
aux.data <- auxfile %>% select(UniqueID, start.time) %>% distinct()
}
# Get obs.length
if (is.null(obs.length)){
# If there is no auxfile
if (is.null(auxfile)){
aux.data <- aux.data %>% left_join(
inputfile %>% select(c(UniqueID = chamID, obs.length)) %>% distinct(), by = "UniqueID")
} else {
aux.data <- aux.data %>% left_join(
auxfile %>% select(c(UniqueID, obs.length)) %>% distinct(), by = "UniqueID")
}
} else {
aux.data <- aux.data %>% mutate(obs.length = obs.length)
}
# Define windows of time ranges to keep
time_range <- aux.data %>% group_by(UniqueID, start.time) %>%
reframe(time_min = start.time - shoulder,
time_max = start.time + obs.length + shoulder)
time_filter.ls <- list()
for (i in 1:nrow(time_range)) {
time_filter.ls[[i]] <- cbind.data.frame(UniqueID = time_range$UniqueID[[i]],
start.time = time_range$start.time[[i]],
POSIX.time = seq(from = time_range$time_min[i],
to = time_range$time_max[i],
by = 'sec'))
}
time_filter <- map_df(time_filter.ls, ~as.data.frame(.x)) %>% distinct()
# If there is no auxfile, remove start.time from inputfile at this point
if (is.null(auxfile)){
inputfile <- inputfile %>% select(!c(start.time))
}
# Add start.time to inputfile and filter POSIXct
data.filter <- inputfile %>%
right_join(time_filter, relationship = "many-to-many", by = "POSIX.time") %>%
drop_na(matches(gastype))
# Split data.filter into a list of data frame unique per measurement
flux.unique <- data.filter %>% group_split(start.time) %>% as.list()
if (length(flux.unique) > 20){
message("WARNING! Do not loop through more than 20 measurements at a time to avoid mistakes.",
"\nYou have ", length(flux.unique), " measurements in your dataset.",
"\nYou should split the next step into at least ", round(length(flux.unique)/20), " loops.")
}
# TEST LI7810 + smart chamber
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI7810_imp.Rdata")
inputfile <- data.raw; rm(data.raw)
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI8200_imp.Rdata")
auxfile <- data.raw; rm(data.raw)
gastype = "CO2dry_ppm"
obs.length = NULL
shoulder = 60
# Convert milliseconds to seconds, for compatibility
inputfile <- inputfile %>%
mutate(POSIX.time = as.POSIXct(round(POSIX.time, "secs")))
# Get start.time and UniqueID
if (is.null(auxfile)){
aux.data <- inputfile %>% select(UniqueID = chamID, start.time) %>% distinct()
} else {
# Rename chamID to UniqueID if auxfile is a smart chamber
if (any(grepl("chamID", names(auxfile))) == TRUE){
auxfile <- auxfile %>% mutate(UniqueID = chamID)
}
aux.data <- auxfile %>% select(UniqueID, start.time) %>% distinct()
}
# Get obs.length
if (is.null(obs.length)){
# If there is no auxfile
if (is.null(auxfile)){
aux.data <- aux.data %>% left_join(
inputfile %>% select(c(UniqueID = chamID, obs.length)) %>% distinct(), by = "UniqueID")
} else {
aux.data <- aux.data %>% left_join(
auxfile %>% select(c(UniqueID, obs.length)) %>% distinct(), by = "UniqueID")
}
} else {
aux.data <- aux.data %>% mutate(obs.length = obs.length)
}
# Define windows of time ranges to keep
time_range <- aux.data %>% group_by(UniqueID, start.time) %>%
reframe(time_min = start.time - shoulder,
time_max = start.time + obs.length + shoulder)
time_filter.ls <- list()
for (i in 1:nrow(time_range)) {
time_filter.ls[[i]] <- cbind.data.frame(UniqueID = time_range$UniqueID[[i]],
start.time = time_range$start.time[[i]],
POSIX.time = seq(from = time_range$time_min[i],
to = time_range$time_max[i],
by = 'sec'))
}
time_filter <- map_df(time_filter.ls, ~as.data.frame(.x)) %>% distinct()
# If there is no auxfile, remove start.time from inputfile at this point
if (is.null(auxfile)){
inputfile <- inputfile %>% select(!c(start.time))
}
# Add start.time to inputfile and filter POSIXct
data.filter <- inputfile %>%
right_join(time_filter, relationship = "many-to-many", by = "POSIX.time") %>%
drop_na(matches(gastype))
# Split data.filter into a list of data frame unique per measurement
flux.unique <- data.filter %>% group_split(start.time) %>% as.list()
if (length(flux.unique) > 20){
message("WARNING! Do not loop through more than 20 measurements at a time to avoid mistakes.",
"\nYou have ", length(flux.unique), " measurements in your dataset.",
"\nYou should split the next step into at least ", round(length(flux.unique)/20), " loops.")
}
# TEST LI6400 without AUX FILE
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI6400_imp.Rdata")
inputfile <- data.raw; rm(data.raw)
auxfile = NULL
gastype = "CO2dry_ppm"
obs.length = NULL
shoulder = 0
# Convert milliseconds to seconds, for compatibility
inputfile <- inputfile %>%
mutate(POSIX.time = as.POSIXct(round(POSIX.time, "secs")))
# Get start.time and UniqueID
if (is.null(auxfile)){
aux.data <- inputfile %>% select(UniqueID = chamID, start.time) %>% distinct()
} else {
# Rename chamID to UniqueID if auxfile is a smart chamber
if (any(grepl("chamID", names(auxfile))) == TRUE){
auxfile <- auxfile %>% mutate(UniqueID = chamID)
}
aux.data <- auxfile %>% select(UniqueID, start.time) %>% distinct()
}
# Get obs.length
if (is.null(obs.length)){
# If there is no auxfile
if (is.null(auxfile)){
aux.data <- aux.data %>% left_join(
inputfile %>% select(c(UniqueID = chamID, obs.length)) %>% distinct(), by = "UniqueID")
} else {
aux.data <- aux.data %>% left_join(
auxfile %>% select(c(UniqueID, obs.length)) %>% distinct(), by = "UniqueID")
}
} else {
aux.data <- aux.data %>% mutate(obs.length = obs.length)
}
# Define windows of time ranges to keep
time_range <- aux.data %>% group_by(UniqueID, start.time) %>%
reframe(time_min = start.time - shoulder,
time_max = start.time + obs.length + shoulder)
time_filter.ls <- list()
for (i in 1:nrow(time_range)) {
time_filter.ls[[i]] <- cbind.data.frame(UniqueID = time_range$UniqueID[[i]],
start.time = time_range$start.time[[i]],
POSIX.time = seq(from = time_range$time_min[i],
to = time_range$time_max[i],
by = 'sec'))
}
time_filter <- map_df(time_filter.ls, ~as.data.frame(.x)) %>% distinct()
# If there is no auxfile, remove start.time from inputfile at this point
if (is.null(auxfile)){
inputfile <- inputfile %>% select(!c(start.time))
}
# Add start.time to inputfile and filter POSIXct
data.filter <- inputfile %>%
right_join(time_filter, relationship = "many-to-many", by = "POSIX.time") %>%
drop_na(matches(gastype))
# Split data.filter into a list of data frame unique per measurement
flux.unique <- data.filter %>% group_split(start.time) %>% as.list()
if (length(flux.unique) > 20){
message("WARNING! Do not loop through more than 20 measurements at a time to avoid mistakes.",
"\nYou have ", length(flux.unique), " measurements in your dataset.",
"\nYou should split the next step into at least ", round(length(flux.unique)/20), " loops.")
}
data("trees")
test <- data("trees")
test <- get(data("trees"))
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI8200_imp.RData")
example_LI8200_imp <- data.raw
save(example_LI8200_imp, file = "example_LI8200_imp .RData")
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI7810_imp.RData")
example_LI7810_imp <- data.raw
save(example_LI7810_imp, file = "example_LI7810_imp.RData")
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI6400_imp.RData")
example_LI6400_imp <- data.raw
save(example_LI6400_imp, file = "example_LI6400_imp.RData")
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LGR_imp.RData")
example_LGR_imp <- data.raw
save(example_LGR_imp, file = "example_LGR_imp.RData")
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself")
install.packages("rcmdcheck")
library(rcmdcheck)
rcmdcheck()
library(roxygen2)
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LGR_imp.RData")
head(example_LGR_imp)
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself")
install.packages("rcmdcheck")
library(rcmdcheck)
rcmdcheck(.)
install.packages("rcmdcheck")
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI8200_imp.RData")
getwd
getwd()
save(example_LI8200_imp, file = "data/example_LI8200_imp.RData", compression_level = 9)
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI7810_imp.RData")
save(example_LI7810_imp, file = "data/example_LI7810_imp.RData", compression_level = 9)
save(example_LI7810_imp, file = "data/example_LI7810_imp.RData", compression_level = 9, compress = "xz")
save(example_LI8200_imp, file = "data/example_LI8200_imp.RData", compression_level = 9, compress = "xz")
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LI6400_imp.RData")
save(example_LI6400_imp, file = "data/example_LI6400_imp.RData", compression_level = 9, compress = "xz")
load("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself/data/example_LGR_imp.RData")
save(example_LGR_imp, file = "data/example_LGR_imp.RData", compression_level = 9, compress = "xz")
library(minpack.lm)
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)/GoFluxYourself")
library(rcmdcheck)
rcmdcheck()
is.null(dev.list()))
is.null(dev.list())
while (!is.null(dev.list()))  dev.off()
library(rcmdcheck)
rcmdcheck()
while (!is.null(dev.list()))  dev.set(dev.next()); dev.off()
dev.off()
while (!is.null(dev.list()))  dev.set(dev.next())
while (!is.null(dev.list()))  dev.off()
dev.set(dev.next())
dev.set(dev.next())
dev.set(dev.next())
dev.set(dev.next())
dev.set(dev.next())
dev.set(dev.next())
dev.set(dev.next())
dev.set(dev.next())
dev.off()
dev.set(dev.next()); dev.set(dev.next()); dev.set(dev.next())
dev.set(dev.next()); dev.set(dev.next()); dev.set(dev.next())
# EXAMPLE
library(dplyr)
load("data/example_LI8200_imp.RData")
test <- example_LI8200_imp %>% rename("UniqueID" = chamID) %>%
filter(UniqueID == "732a_B_W_1") %>% filter(flag == 1)
gas.meas <- Reduce("c", test[, "CO2dry_ppm"])
time.meas <- Reduce("c", test[, "POSIX.time"])
