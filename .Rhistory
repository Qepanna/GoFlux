withCallingHandlers(
LGR_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# GAIA ####
if(instrument == "GAIA"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.csv", full.names = TRUE)
# Catch errors and messages from import function to print after progress bar
errs <- character(0)
msgs <- character(0)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
GAIA_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# G2508 ####
if(instrument == "G2508"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.dat", full.names = TRUE)
# Catch errors and messages from import function to print after progress bar
errs <- character(0)
msgs <- character(0)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
G2508_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# LI-6400 ####
if(instrument == "LI-6400"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.txt", full.names = TRUE)
# Catch errors and messages from import function to print after progress bar
errs <- character(0)
msgs <- character(0)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
LI6400_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# LI-7810 ####
if(instrument == "LI-7810"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.data", full.names = TRUE)
# Catch errors and messages from import function to print after progress bar
errs <- character(0)
msgs <- character(0)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
LI7810_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# LI-7820 ####
if(instrument == "LI-7820"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.data", full.names = TRUE)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
LI7820_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# LI-8100 ####
if(instrument == "LI-8100"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.81x", full.names = TRUE)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
tryCatch(supress_message(
LI8100_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE)),
error = function(e){
message(paste("Error occurred in file", file_list[[i]],":\n"), e)})
})
}
# LI-8200 Smart Chamber ####
if(instrument == "LI-8200"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.json", full.names = TRUE)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
tryCatch(supress_message(
LI8200_import(inputfile = file_list[i],
save = TRUE)),
error = function(e){
message(paste("Error occurred in file", file_list[[i]],":\n"), e)})
})
}
}
import2Rdata(path = "test files/LGR", instrument = "LGR", date.format = "dmy")
#' import2Rdata(path = "inst/extdata/LI6400", instrument = "LI-6400", date.format = "ymd")
#' import2Rdata(path = "inst/extdata/LI7810", instrument = "LI-7810", date.format = "ymd")
#' import2Rdata(path = "inst/extdata/LI7820", instrument = "LI-7820", date.format = "ymd")
#' import2Rdata(path = "inst/extdata/LI8100", instrument = "LI-8100", date.format = "ymd")
#'
#' # with the LI-COR smart chamber (LI-8200)
#' # with this instrument, date.format is not a useful parameter.
#' import2Rdata(path = "inst/extdata/LI8200", instrument = "LI-8200")
#' @export
#'
import2Rdata <- function(path, instrument, date.format, timezone = "UTC"){
# Progress bar options
pboptions(char = "=")
# Catch errors and messages from import function to print after progress bar
errs <- character(0)
msgs <- character(0)
# Los Gatos Research ####
if(instrument == "LGR"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.txt", full.names = TRUE)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
LGR_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
}
# GAIA ####
if(instrument == "GAIA"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.csv", full.names = TRUE)
# Catch errors and messages from import function to print after progress bar
errs <- character(0)
msgs <- character(0)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
GAIA_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# G2508 ####
if(instrument == "G2508"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.dat", full.names = TRUE)
# Catch errors and messages from import function to print after progress bar
errs <- character(0)
msgs <- character(0)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
G2508_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# LI-6400 ####
if(instrument == "LI-6400"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.txt", full.names = TRUE)
# Catch errors and messages from import function to print after progress bar
errs <- character(0)
msgs <- character(0)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
LI6400_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# LI-7810 ####
if(instrument == "LI-7810"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.data", full.names = TRUE)
# Catch errors and messages from import function to print after progress bar
errs <- character(0)
msgs <- character(0)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
LI7810_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# LI-7820 ####
if(instrument == "LI-7820"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.data", full.names = TRUE)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
withCallingHandlers(
LI7820_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE),
error = function(e){
errs <<- c(errs, message(
paste("Error occurred in file", file_list[[i]],":\n"), e))
},
message = function(m){
msgs <<- c(msgs, conditionMessage(m))
invokeRestart("muffleMessage")
})
})
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
# LI-8100 ####
if(instrument == "LI-8100"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.81x", full.names = TRUE)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
tryCatch(supress_message(
LI8100_import(inputfile = file_list[i],
date.format = date.format,
timezone = timezone,
save = TRUE)),
error = function(e){
message(paste("Error occurred in file", file_list[[i]],":\n"), e)})
})
}
# LI-8200 Smart Chamber ####
if(instrument == "LI-8200"){
# List all the files contained in the specified path
file_list <- list.files(path = path, pattern = "\\.json", full.names = TRUE)
# Loop through files in "file_list" and apply import functions
pblapply(seq_along(file_list), function(i) {
tryCatch(supress_message(
LI8200_import(inputfile = file_list[i],
save = TRUE)),
error = function(e){
message(paste("Error occurred in file", file_list[[i]],":\n"), e)})
})
}
# Print errors and messages after progress bar
errs <- trimws(errs); for (e in errs) warning(e, call. = F)
msgs <- trimws(msgs); for (m in msgs) message(m)
}
import2Rdata(path = "test files/LGR", instrument = "LGR", date.format = "dmy")
import2Rdata(path = "test files/LGR", instrument = "LGR", date.format = "dmy")
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)")
inputfile = "test files/example_GAIA.csv"
date.format = "ymd"
timezone = "UTC"
# Assign NULL to variables without binding
POSIX.time <- Chamber <- DATE_TIME <- XT3C05_H2O <- XT3C04_N2O <- . <-
XT2C06_H2O <- XT2C04_CH4 <- XT2C05_CO2 <- SEQUENCE <- Titles. <- NULL
# Import raw data file from GAIA (.csv)
data.raw <- read.delim(inputfile, skip = 1, colClasses = "character") %>%
# Remove first row containing units
filter(!Titles. == 'Units:') %>%
# Modify useful column names
setNames(gsub("COM5A0", "CH", names(.))) %>%
setNames(gsub("1C07_Soil.Temperature", "_Tsoil", names(.))) %>%
setNames(gsub("2C07_Chamber.Temperature", "_Tcham", names(.))) %>%
setNames(gsub("1C08_Soil.Moisture", "_SWC", names(.))) %>%
setNames(gsub("3C07_Sunlight", "_PAR", names(.))) %>%
setNames(gsub("0C06_OperatingStatus", "_Op.stat", names(.))) %>%
mutate(SEQUENCE = substr(SEQUENCE, 9, 9)) %>%
dplyr::rename(DATE_TIME = Titles., Chamber = SEQUENCE) %>%
# Gas measurements from GHG analyzers need to be renamed manually
dplyr::rename(
# LI-7810: CO2dry_ppm, CH4dry_ppb, H2O_ppm_LI7810
CO2dry_ppm = XT2C05_CO2,
CH4dry_ppb = XT2C04_CH4,
H2O_ppm_LI7810 = XT2C06_H2O,
# LI-7820: N2Odry_ppb, H2O_ppm_LI7820
N2Odry_ppb = XT3C04_N2O,
H2O_ppm_LI7820 = XT3C05_H2O) %>%
# Select only useful columns
select(contains(c("DATE_TIME", "Chamber", "Tsoil", "Tcham", "SWC", "PAR",
"Op.stat", "ppm", "ppb")))
library(dplyr)
# Import raw data file from GAIA (.csv)
data.raw <- read.delim(inputfile, skip = 1, colClasses = "character") %>%
# Remove first row containing units
filter(!Titles. == 'Units:') %>%
# Modify useful column names
setNames(gsub("COM5A0", "CH", names(.))) %>%
setNames(gsub("1C07_Soil.Temperature", "_Tsoil", names(.))) %>%
setNames(gsub("2C07_Chamber.Temperature", "_Tcham", names(.))) %>%
setNames(gsub("1C08_Soil.Moisture", "_SWC", names(.))) %>%
setNames(gsub("3C07_Sunlight", "_PAR", names(.))) %>%
setNames(gsub("0C06_OperatingStatus", "_Op.stat", names(.))) %>%
mutate(SEQUENCE = substr(SEQUENCE, 9, 9)) %>%
dplyr::rename(DATE_TIME = Titles., Chamber = SEQUENCE) %>%
# Gas measurements from GHG analyzers need to be renamed manually
dplyr::rename(
# LI-7810: CO2dry_ppm, CH4dry_ppb, H2O_ppm_LI7810
CO2dry_ppm = XT2C05_CO2,
CH4dry_ppb = XT2C04_CH4,
H2O_ppm_LI7810 = XT2C06_H2O,
# LI-7820: N2Odry_ppb, H2O_ppm_LI7820
N2Odry_ppb = XT3C04_N2O,
H2O_ppm_LI7820 = XT3C05_H2O) %>%
# Select only useful columns
select(contains(c("DATE_TIME", "Chamber", "Tsoil", "Tcham", "SWC", "PAR",
"Op.stat", "ppm", "ppb")))
# Create a new column containing date and time (POSIX format)
op <- options()
options(digits.secs=6)
if(date.format == "dmy"){
data.raw$POSIX.time <- as.POSIXct(dmy_hms(data.raw$DATE_TIME, tz = timezone),
format = "%Y-%m-%d %H:%M:%OS")
}
if(date.format == "mdy"){
data.raw$POSIX.time <- as.POSIXct(mdy_hms(data.raw$DATE_TIME, tz = timezone),
format = "%Y-%m-%d %H:%M:%OS")
}
if(date.format == "ymd"){
data.raw$POSIX.time <- as.POSIXct(ymd_hms(data.raw$DATE_TIME, tz = timezone),
format = "%Y-%m-%d %H:%M:%OS")
}
library(lubridate)
# Create a new column containing date and time (POSIX format)
op <- options()
options(digits.secs=6)
if(date.format == "dmy"){
data.raw$POSIX.time <- as.POSIXct(dmy_hms(data.raw$DATE_TIME, tz = timezone),
format = "%Y-%m-%d %H:%M:%OS")
}
if(date.format == "mdy"){
data.raw$POSIX.time <- as.POSIXct(mdy_hms(data.raw$DATE_TIME, tz = timezone),
format = "%Y-%m-%d %H:%M:%OS")
}
if(date.format == "ymd"){
data.raw$POSIX.time <- as.POSIXct(ymd_hms(data.raw$DATE_TIME, tz = timezone),
format = "%Y-%m-%d %H:%M:%OS")
}
options(op)
# Group together all columns containing information on
# Operating Status from each chamber
Op.stat <- data.raw %>% select(DATE_TIME, contains("Op.stat")) %>%
pivot_longer(contains("Op.stat"), values_to = "Op.stat", names_to = "Chamber") %>%
mutate(Chamber = substr(Chamber, 3, 3))
library(tidyr)
# Group together all columns containing information on
# Operating Status from each chamber
Op.stat <- data.raw %>% select(DATE_TIME, contains("Op.stat")) %>%
pivot_longer(contains("Op.stat"), values_to = "Op.stat", names_to = "Chamber") %>%
mutate(Chamber = substr(Chamber, 3, 3))
# Merge data and op.stat information
data.raw <- data.raw %>% left_join(Op.stat, by = c("DATE_TIME", "Chamber")) %>%
select(!contains("_Op.stat")) %>%
# Add a column for DATE
mutate(DATE = substr(POSIX.time, 0, 10))
# Create Rdata folder in working directory
Rdata_folder <- paste(getwd(), "Rdata", sep = "/")
Rdata_folder
if(dir.exists(Rdata_folder) == FALSE){dir.create(Rdata_folder)}
# Create output file: change extension to .Rdata, and
# add instrument name and "imp" for import to file name
outputfile <- paste("GAIA_", sub("\\.csv", "", inputfile), "_imp.Rdata", sep = "")
outputfile
# Create output file: change extension to .Rdata, and
# add instrument name and "imp" for import to file name
file.name <- gsub(".*/", sub("\\.csv", "", inputfile))
sub("\\.csv", "", inputfile)
# Create output file: change extension to .Rdata, and
# add instrument name and "imp" for import to file name
file.name <- gsub(".*/", "", sub("\\.csv", "", inputfile))
file.name
outputfile <- paste("GAIA_", file.name, "_imp.Rdata", sep = "")
outputfile
paste(Rdata_folder, outputfile, sep = "/")
setwd("I:/SCIENCE-IGN-ALL-Climaite-metdata/GoFluxYourself (Standardized R scripts)")
inputfile = "test files/G2508"
date.format = "ymd"
timezone = "UTC"
